///////////////////CODE GENERATED VIA MATHEMATICA///////////////////


#include "../../model.hpp"

double DT::H3H3H1H1(const double &cos_t, const double &s){
	using namespace PAR;
	double t =  (MH1*MH1) + (-s + cos_t*sqrt(s - 4* (MH1*MH1))*sqrt(s - 4* (MH3*MH3)))/2. +  (MH3*MH3);
	double u = -s - t + MH3*MH3 + MH3*MH3 + MH1*MH1 + MH1*MH1;
	return 0.5*((-2*token1*token11*token12)/(-(t*token14) + token14* (MH3*MH3)) - (2*token1*token11*token12)/(-(token14*u) + token14* (MH3*MH3)) +  (token1*token1) + (2* (token11*token11)* (token12*token12))/((-t +  (MH3*MH3))*(-u +  (MH3*MH3))* (token14*token14)) + ( (token11*token11)* (token12*token12))/( (( (MH3*MH3) - t)*( (MH3*MH3) - t))* (token14*token14)) + ( (token11*token11)* (token12*token12))/( (token14*token14)* (( (MH3*MH3) - u)*( (MH3*MH3) - u))) + (2*token1*token2*token3*token4*token5*(s -  (MH1*MH1)))/(token14*token15*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token11*token12*token2*token3*token4*token5*(-s +  (MH1*MH1)))/(token15*(-t +  (MH3*MH3))* (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token11*token12*token2*token3*token4*token5*(-s +  (MH1*MH1)))/(token15*(-u +  (MH3*MH3))* (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + ( (token2*token2)* (token3*token3)* (token4*token4)* (token5*token5))/( (token14*token14)* (token15*token15)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token1*token10*token6*token7*token8*token9*(s -  (MH2*MH2)))/(token14*token15*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token11*token12*token6*token7*token8*token9*(-s +  (MH2*MH2)))/(token15*(-t +  (MH3*MH3))* (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token11*token12*token6*token7*token8*token9*(-s +  (MH2*MH2)))/(token15*(-u +  (MH3*MH3))* (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + ( (token10*token10)* (token6*token6)* (token7*token7)* (token8*token8)* (token9*token9))/( (token14*token14)* (token15*token15)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token2*token3*token4*token5*token6*token7*token8*token9*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2))))/( (token14*token14)* (token15*token15)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3H1H2(const double &cos_t, const double &s){
	using namespace PAR;
	double t = (-s +  (MH1*MH1) +  (MH2*MH2) + 2* (MH3*MH3) + cos_t*sqrt(s - 4* (MH3*MH3))*sqrt(( (MH1*MH1*MH1*MH1) - 2* (MH1*MH1)*(s +  (MH2*MH2)) +  (( (MH2*MH2) - s)*( (MH2*MH2) - s)))/s))/2.;
	double u = -s - t + MH3*MH3 + MH3*MH3 + MH1*MH1 + MH2*MH2;
	return ((2* (token10*token10)* (token4*token4))/((-t +  (MH3*MH3))*(-u +  (MH3*MH3))* (token14*token14)) + ( (token10*token10)* (token4*token4))/( (( (MH3*MH3) - t)*( (MH3*MH3) - t))* (token14*token14)) + ( (token10*token10)* (token4*token4))/( (token14*token14)* (( (MH3*MH3) - u)*( (MH3*MH3) - u))) + (2*token10*token11*token16*token4*token7*token8)/(token14*(t -  (MH3*MH3))* (v*v)) + (2*token10*token11*token16*token4*token7*token8)/(token14*(u -  (MH3*MH3))* (v*v)) + ( (token11*token11)* (token16*token16)* (token7*token7)* (token8*token8))/ (v*v*v*v) + (2*token10*token11*token6*token7*token8*token9*(-s +  (MH1*MH1))* (token4*token4))/(token15*(-t +  (MH3*MH3))* (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token10*token11*token6*token7*token8*token9*(-s +  (MH1*MH1))* (token4*token4))/(token15*(-u +  (MH3*MH3))* (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + ( (token11*token11)* (token4*token4)* (token6*token6)* (token7*token7)* (token8*token8)* (token9*token9))/( (token14*token14)* (token15*token15)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token16*token4*token6*token9*(s -  (MH1*MH1))* (token11*token11)* (token7*token7)* (token8*token8))/(token14*token15* (v*v)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token11*token17*token18*token4*token7*token8*(-s +  (MH2*MH2))* (token10*token10))/(token15*(-t +  (MH3*MH3))* (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token11*token17*token18*token4*token7*token8*(-s +  (MH2*MH2))* (token10*token10))/(token15*(-u +  (MH3*MH3))* (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + ( (token10*token10)* (token11*token11)* (token17*token17)* (token18*token18)* (token7*token7)* (token8*token8))/( (token14*token14)* (token15*token15)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token16*token17*token18*(s -  (MH2*MH2))* (token11*token11)* (token7*token7)* (token8*token8))/(token14*token15* (v*v)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token17*token18*token4*token6*token9*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))* (token11*token11)* (token7*token7)* (token8*token8))/( (token14*token14)* (token15*token15)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3H2H2(const double &cos_t, const double &s){
	using namespace PAR;
	double t =  (MH2*MH2) + (-s + cos_t*sqrt(s - 4* (MH2*MH2))*sqrt(s - 4* (MH3*MH3)))/2. +  (MH3*MH3);
	double u = -s - t + MH3*MH3 + MH3*MH3 + MH2*MH2 + MH2*MH2;
	return 0.5*((-2*token11*token19*token23)/(-(t*token14) + token14* (MH3*MH3)) - (2*token11*token19*token23)/(-(token14*u) + token14* (MH3*MH3)) +  (token19*token19) + (2* (token11*token11)* (token23*token23))/((-t +  (MH3*MH3))*(-u +  (MH3*MH3))* (token14*token14)) + ( (token11*token11)* (token23*token23))/( (( (MH3*MH3) - t)*( (MH3*MH3) - t))* (token14*token14)) + ( (token11*token11)* (token23*token23))/( (token14*token14)* (( (MH3*MH3) - u)*( (MH3*MH3) - u))) + (2*token17*token18*token19*token4*token7*token8*(s -  (MH1*MH1)))/(token14*token15*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token11*token17*token18*token23*token4*token7*token8*(-s +  (MH1*MH1)))/(token15*(-t +  (MH3*MH3))* (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token11*token17*token18*token23*token4*token7*token8*(-s +  (MH1*MH1)))/(token15*(-u +  (MH3*MH3))* (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + ( (token17*token17)* (token18*token18)* (token4*token4)* (token7*token7)* (token8*token8))/( (token14*token14)* (token15*token15)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*token10*token19*token20*token21*token22*(s -  (MH2*MH2)))/(token14*token15*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token11*token20*token21*token22*token23*(-s +  (MH2*MH2)))/(token15*(-t +  (MH3*MH3))* (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token11*token20*token21*token22*token23*(-s +  (MH2*MH2)))/(token15*(-u +  (MH3*MH3))* (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + ( (token10*token10)* (token20*token20)* (token21*token21)* (token22*token22))/( (token14*token14)* (token15*token15)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (2*token10*token17*token18*token20*token21*token22*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2))))/( (token14*token14)* (token15*token15)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3ZZ(const double &cos_t, const double &s){
	using namespace PAR;
	double t =  (MH3*MH3) + (-s + cos_t*sqrt(s - 4* (MH3*MH3))*sqrt(s - 4* (MZ*MZ)))/2. +  (MZ*MZ);
	double u = -s - t + MH3*MH3 + MH3*MH3 + MZ*MZ + MZ*MZ;
	return 0.5*(-0.5*((s*(s + t - u)*(-u +  (MH3*MH3)) - 2*(s + 3*t + u + 4* (MH3*MH3))* (MZ*MZ*MZ*MZ) + 8* (MZ*MZ*MZ*MZ*MZ*MZ) +  (MZ*MZ)*(2*t*(t - u) + 3*s*(t + u) - 2*(3*s + t - u)* (MH3*MH3) +  (s*s)))* (token24*token24)* (token25*token25))/(token26*token29*(-u +  (MA0*MA0))* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)) - ((s*(s - t + u)*(-t +  (MH3*MH3)) - 2*(s + t + 3*u + 4* (MH3*MH3))* (MZ*MZ*MZ*MZ) + 8* (MZ*MZ*MZ*MZ*MZ*MZ) +  (MZ*MZ)*(2*u*(-t + u) + 3*s*(t + u) - 2*(3*s - t + u)* (MH3*MH3) +  (s*s)))* (token24*token24)* (token25*token25))/(2.*token26*token29*(-t +  (MA0*MA0))* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)) + ((-4*s* (MZ*MZ) + 12* (MZ*MZ*MZ*MZ) +  (s*s))* (token24*token24)* (token25*token25))/(4.* (MZ*MZ*MZ*MZ)* (token26*token26)* (token27*token27)* (token28*token28)) + ( (token24*token24)* (token25*token25)*(-16* (MH3*MH3)* (MZ*MZ) +  ((s + t - u)*(s + t - u)))*( (MH3*MH3*MH3*MH3) - 2* (MH3*MH3)*(u +  (MZ*MZ)) +  (( (MZ*MZ) - u)*( (MZ*MZ) - u))))/(4.* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)* (token29*token29)* (( (MA0*MA0) - u)*( (MA0*MA0) - u))) + ( (token24*token24)* (token25*token25)*(-8*(-s + 2*(t + u) + 4* (MH3*MH3))* (MZ*MZ*MZ*MZ*MZ*MZ) + 16* (MZ*MZ*MZ*MZ*MZ*MZ*MZ*MZ) - (-t +  (MH3*MH3))*(-u +  (MH3*MH3))*(- (s*s) +  ((t - u)*(t - u))) +  (MZ*MZ)*(-8*s*t*u + 8*s* (MH3*MH3*MH3*MH3) + (t + u)* (s*s) - (t + u)* ((t - u)*(t - u)) - 2* (MH3*MH3)*( (s*s) + 3* ((t - u)*(t - u)))) +  (MZ*MZ*MZ*MZ)*(2*t*u - 16*(s - t - u)* (MH3*MH3) + 16* (MH3*MH3*MH3*MH3) +  (s*s) + 7* (t*t) + 7* (u*u))))/(2.*(-t +  (MA0*MA0))*(-u +  (MA0*MA0))* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)* (token29*token29)) + (( (MH3*MH3*MH3*MH3) - 2* (MH3*MH3)*(t +  (MZ*MZ)) +  (( (MZ*MZ) - t)*( (MZ*MZ) - t)))* (token24*token24)* (token25*token25)*(-16* (MH3*MH3)* (MZ*MZ) +  ((s - t + u)*(s - t + u))))/(4.* (MZ*MZ*MZ*MZ)* (( (MA0*MA0) - t)*( (MA0*MA0) - t))* (token27*token27)* (token28*token28)* (token29*token29)) + (token11*token4*token7*(-s +  (MH1*MH1))*(s*(s + t - u)*(-u +  (MH3*MH3)) - 2*(s + 3*t + u + 4* (MH3*MH3))* (MZ*MZ*MZ*MZ) + 8* (MZ*MZ*MZ*MZ*MZ*MZ) +  (MZ*MZ)*(2*t*(t - u) + 3*s*(t + u) - 2*(3*s + t - u)* (MH3*MH3) +  (s*s)))* (token24*token24)* (token25*token25))/(2.*token26*token29*(-u +  (MA0*MA0))* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (token11*token4*token7*(-s +  (MH1*MH1))*(s*(s - t + u)*(-t +  (MH3*MH3)) - 2*(s + t + 3*u + 4* (MH3*MH3))* (MZ*MZ*MZ*MZ) + 8* (MZ*MZ*MZ*MZ*MZ*MZ) +  (MZ*MZ)*(2*u*(-t + u) + 3*s*(t + u) - 2*(3*s - t + u)* (MH3*MH3) +  (s*s)))* (token24*token24)* (token25*token25))/(2.*token26*token29*(-t +  (MA0*MA0))* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) - (token11*token4*token7*(-s +  (MH1*MH1))*(-4*s* (MZ*MZ) + 12* (MZ*MZ*MZ*MZ) +  (s*s))* (token24*token24)* (token25*token25))/(2.* (MZ*MZ*MZ*MZ)* (token26*token26)* (token27*token27)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + ((-4*s* (MZ*MZ) + 12* (MZ*MZ*MZ*MZ) +  (s*s))* (token11*token11)* (token24*token24)* (token25*token25)* (token4*token4)* (token7*token7))/(4.* (MZ*MZ*MZ*MZ)* (token26*token26)* (token27*token27)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (token10*token11*token8*(-s +  (MH2*MH2))*(s*(s + t - u)*(-u +  (MH3*MH3)) - 2*(s + 3*t + u + 4* (MH3*MH3))* (MZ*MZ*MZ*MZ) + 8* (MZ*MZ*MZ*MZ*MZ*MZ) +  (MZ*MZ)*(2*t*(t - u) + 3*s*(t + u) - 2*(3*s + t - u)* (MH3*MH3) +  (s*s)))* (token24*token24)* (token25*token25))/(2.*token26*token29*(-u +  (MA0*MA0))* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (token10*token11*token8*(-s +  (MH2*MH2))*(s*(s - t + u)*(-t +  (MH3*MH3)) - 2*(s + t + 3*u + 4* (MH3*MH3))* (MZ*MZ*MZ*MZ) + 8* (MZ*MZ*MZ*MZ*MZ*MZ) +  (MZ*MZ)*(2*u*(-t + u) + 3*s*(t + u) - 2*(3*s - t + u)* (MH3*MH3) +  (s*s)))* (token24*token24)* (token25*token25))/(2.*token26*token29*(-t +  (MA0*MA0))* (MZ*MZ*MZ*MZ)* (token27*token27)* (token28*token28)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) - (token10*token11*token8*(-s +  (MH2*MH2))*(-4*s* (MZ*MZ) + 12* (MZ*MZ*MZ*MZ) +  (s*s))* (token24*token24)* (token25*token25))/(2.* (MZ*MZ*MZ*MZ)* (token26*token26)* (token27*token27)* (token28*token28)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + ((-4*s* (MZ*MZ) + 12* (MZ*MZ*MZ*MZ) +  (s*s))* (token10*token10)* (token11*token11)* (token24*token24)* (token25*token25)* (token8*token8))/(4.* (MZ*MZ*MZ*MZ)* (token26*token26)* (token27*token27)* (token28*token28)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (token10*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))*(-4*s* (MZ*MZ) + 12* (MZ*MZ*MZ*MZ) +  (s*s))* (token11*token11)* (token24*token24)* (token25*token25))/(2.* (MZ*MZ*MZ*MZ)* (token26*token26)* (token27*token27)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3wW(const double &cos_t, const double &s){
	using namespace PAR;
	double t =  (MH3*MH3) + (-s + cos_t*sqrt(s - 4* (MH3*MH3))*sqrt(s - 4* (MW*MW)))/2. +  (MW*MW);
	double u = -s - t + MH3*MH3 + MH3*MH3 + MW*MW + MW*MW;
	return (-0.5*(token30*token31*(s*(s + t - u)*(-u +  (MH3*MH3)) - 2*(s + 3*t + u + 4* (MH3*MH3))* (MW*MW*MW*MW) + 8* (MW*MW*MW*MW*MW*MW) +  (MW*MW)*(2*t*(t - u) + 3*s*(t + u) - 2*(3*s + t - u)* (MH3*MH3) +  (s*s)))* (token24*token24))/(token26*token28*(-u +  (MHch*MHch))* (MW*MW*MW*MW)) - (token30*token31*(s*(s - t + u)*(-t +  (MH3*MH3)) - 2*(s + t + 3*u + 4* (MH3*MH3))* (MW*MW*MW*MW) + 8* (MW*MW*MW*MW*MW*MW) +  (MW*MW)*(2*u*(-t + u) + 3*s*(t + u) - 2*(3*s - t + u)* (MH3*MH3) +  (s*s)))* (token24*token24))/(2.*token26*token28*(-t +  (MHch*MHch))* (MW*MW*MW*MW)) + ((-4*s* (MW*MW) + 12* (MW*MW*MW*MW) +  (s*s))* (token24*token24))/(4.* (MW*MW*MW*MW)* (token26*token26)* (token28*token28)) + ( (token24*token24)* (token30*token30)* (token31*token31)*(-16* (MH3*MH3)* (MW*MW) +  ((s + t - u)*(s + t - u)))*( (MH3*MH3*MH3*MH3) - 2* (MH3*MH3)*(u +  (MW*MW)) +  (( (MW*MW) - u)*( (MW*MW) - u))))/(4.* (MW*MW*MW*MW)* (( (MHch*MHch) - u)*( (MHch*MHch) - u))) + ( (token24*token24)* (token30*token30)* (token31*token31)*(-8*(-s + 2*(t + u) + 4* (MH3*MH3))* (MW*MW*MW*MW*MW*MW) + 16* (MW*MW*MW*MW*MW*MW*MW*MW) - (-t +  (MH3*MH3))*(-u +  (MH3*MH3))*(- (s*s) +  ((t - u)*(t - u))) +  (MW*MW)*(-8*s*t*u + 8*s* (MH3*MH3*MH3*MH3) + (t + u)* (s*s) - (t + u)* ((t - u)*(t - u)) - 2* (MH3*MH3)*( (s*s) + 3* ((t - u)*(t - u)))) +  (MW*MW*MW*MW)*(2*t*u - 16*(s - t - u)* (MH3*MH3) + 16* (MH3*MH3*MH3*MH3) +  (s*s) + 7* (t*t) + 7* (u*u))))/(2.*(-t +  (MHch*MHch))*(-u +  (MHch*MHch))* (MW*MW*MW*MW)) + (( (MH3*MH3*MH3*MH3) - 2* (MH3*MH3)*(t +  (MW*MW)) +  (( (MW*MW) - t)*( (MW*MW) - t)))* (token24*token24)* (token30*token30)* (token31*token31)*(-16* (MH3*MH3)* (MW*MW) +  ((s - t + u)*(s - t + u))))/(4.* (MW*MW*MW*MW)* (( (MHch*MHch) - t)*( (MHch*MHch) - t))) + (token11*token30*token31*token4*token7*(-s +  (MH1*MH1))*(s*(s + t - u)*(-u +  (MH3*MH3)) - 2*(s + 3*t + u + 4* (MH3*MH3))* (MW*MW*MW*MW) + 8* (MW*MW*MW*MW*MW*MW) +  (MW*MW)*(2*t*(t - u) + 3*s*(t + u) - 2*(3*s + t - u)* (MH3*MH3) +  (s*s)))* (token24*token24))/(2.*token26*token28*(-u +  (MHch*MHch))* (MW*MW*MW*MW)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (token11*token30*token31*token4*token7*(-s +  (MH1*MH1))*(s*(s - t + u)*(-t +  (MH3*MH3)) - 2*(s + t + 3*u + 4* (MH3*MH3))* (MW*MW*MW*MW) + 8* (MW*MW*MW*MW*MW*MW) +  (MW*MW)*(2*u*(-t + u) + 3*s*(t + u) - 2*(3*s - t + u)* (MH3*MH3) +  (s*s)))* (token24*token24))/(2.*token26*token28*(-t +  (MHch*MHch))* (MW*MW*MW*MW)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) - (token11*token4*token7*(-s +  (MH1*MH1))*(-4*s* (MW*MW) + 12* (MW*MW*MW*MW) +  (s*s))* (token24*token24))/(2.* (MW*MW*MW*MW)* (token26*token26)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + ((-4*s* (MW*MW) + 12* (MW*MW*MW*MW) +  (s*s))* (token11*token11)* (token24*token24)* (token4*token4)* (token7*token7))/(4.* (MW*MW*MW*MW)* (token26*token26)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (token10*token11*token30*token31*token8*(-s +  (MH2*MH2))*(s*(s + t - u)*(-u +  (MH3*MH3)) - 2*(s + 3*t + u + 4* (MH3*MH3))* (MW*MW*MW*MW) + 8* (MW*MW*MW*MW*MW*MW) +  (MW*MW)*(2*t*(t - u) + 3*s*(t + u) - 2*(3*s + t - u)* (MH3*MH3) +  (s*s)))* (token24*token24))/(2.*token26*token28*(-u +  (MHch*MHch))* (MW*MW*MW*MW)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (token10*token11*token30*token31*token8*(-s +  (MH2*MH2))*(s*(s - t + u)*(-t +  (MH3*MH3)) - 2*(s + t + 3*u + 4* (MH3*MH3))* (MW*MW*MW*MW) + 8* (MW*MW*MW*MW*MW*MW) +  (MW*MW)*(2*u*(-t + u) + 3*s*(t + u) - 2*(3*s - t + u)* (MH3*MH3) +  (s*s)))* (token24*token24))/(2.*token26*token28*(-t +  (MHch*MHch))* (MW*MW*MW*MW)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) - (token10*token11*token8*(-s +  (MH2*MH2))*(-4*s* (MW*MW) + 12* (MW*MW*MW*MW) +  (s*s))* (token24*token24))/(2.* (MW*MW*MW*MW)* (token26*token26)* (token28*token28)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + ((-4*s* (MW*MW) + 12* (MW*MW*MW*MW) +  (s*s))* (token10*token10)* (token11*token11)* (token24*token24)* (token8*token8))/(4.* (MW*MW*MW*MW)* (token26*token26)* (token28*token28)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (token10*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))*(-4*s* (MW*MW) + 12* (MW*MW*MW*MW) +  (s*s))* (token11*token11)* (token24*token24))/(2.* (MW*MW*MW*MW)* (token26*token26)* (token28*token28)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3GG(const double &cos_t, const double &s){
	using namespace PAR;
	return 0.5*((16* (s*s)* (token32*token32)* (token33*token33)* (token4*token4))/( (token34*token34)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))));
}
double DT::H3H3Ee(const double &cos_t, const double &s){
	using namespace PAR;
	return ((2*(s - 4* (Me*Me))* (token35*token35)* (token4*token4)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*(s - 4* (Me*Me))* (token10*token10)* (token35*token35)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) - (4*token10*token4*token7*token8*(-s + 4* (Me*Me))*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))* (token35*token35))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3Mm(const double &cos_t, const double &s){
	using namespace PAR;
	return ((2*(s - 4* (MM*MM))* (token36*token36)* (token4*token4)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*(s - 4* (MM*MM))* (token10*token10)* (token36*token36)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (4*token10*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))*(s - 4* (MM*MM))* (token36*token36))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3TAta(const double &cos_t, const double &s){
	using namespace PAR;
	return ((2*(s - 4* (MTA*MTA))* (token37*token37)* (token4*token4)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (2*(s - 4* (MTA*MTA))* (token10*token10)* (token37*token37)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) - (4*token10*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))*(-s + 4* (MTA*MTA))* (token37*token37))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3Uu(const double &cos_t, const double &s){
	using namespace PAR;
	return ((6*(s - 4* (MU*MU))* (token38*token38)* (token4*token4)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (6*(s - 4* (MU*MU))* (token10*token10)* (token38*token38)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (12*token10*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))*(s - 4* (MU*MU))* (token38*token38))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3Cc(const double &cos_t, const double &s){
	using namespace PAR;
	return ((6*(s - 4* (MC*MC))* (token39*token39)* (token4*token4)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (6*(s - 4* (MC*MC))* (token10*token10)* (token39*token39)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (12*token10*token4*token7*token8*(s - 4* (MC*MC))*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))* (token39*token39))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3Tt(const double &cos_t, const double &s){
	using namespace PAR;
	return ((6*(s - 4* (MT*MT))* (token4*token4)* (token40*token40)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (6*(s - 4* (MT*MT))* (token10*token10)* (token40*token40)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (12*token10*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))*(s - 4* (MT*MT))* (token40*token40))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3Dd(const double &cos_t, const double &s){
	using namespace PAR;
	return ((6*(s - 4* (MD*MD))* (token4*token4)* (token41*token41)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (6*(s - 4* (MD*MD))* (token10*token10)* (token41*token41)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (12*token10*token4*token7*token8*(s - 4* (MD*MD))*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))* (token41*token41))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3Ss(const double &cos_t, const double &s){
	using namespace PAR;
	return ((6*(s - 4* (MS*MS))* (token4*token4)* (token42*token42)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (6*(s - 4* (MS*MS))* (token10*token10)* (token42*token42)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (12*token10*token4*token7*token8*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))*(s - 4* (MS*MS))* (token42*token42))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
double DT::H3H3Bb(const double &cos_t, const double &s){
	using namespace PAR;
	return ((6*(s - 4* (MB*MB))* (token4*token4)* (token43*token43)* (token7*token7))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))) + (6*(s - 4* (MB*MB))* (token10*token10)* (token43*token43)* (token8*token8))/( (token14*token14)*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))) + (12*token10*token4*token7*token8*(s - 4* (MB*MB))*(MH1*MH2*WH1*WH2 + s*(s -  (MH2*MH2)) +  (MH1*MH1)*(-s +  (MH2*MH2)))* (token43*token43))/( (token14*token14)*( (MH1*MH1*MH1*MH1) +  (s*s) +  (MH1*MH1)*(-2*s +  (WH1*WH1)))*( (MH2*MH2*MH2*MH2) +  (s*s) +  (MH2*MH2)*(-2*s +  (WH2*WH2)))));
}
