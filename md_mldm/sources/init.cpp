///////////////////CODE GENERATED VIA MATHEMATICA///////////////////


#include "../include/init.hpp"
#include "readdata.hpp"
#include "../amp2s/allamp2s.hpp"
#include "../include/declarations.hpp"

void DT::init(chinfo& ch, std::vector<std::string> data) {
	lPhi = std::stod(data[reader::getColumnIndex("lPhi")]);
	lam3 = std::stod(data[reader::getColumnIndex("lam3")]);
	y1e = std::stod(data[reader::getColumnIndex("y1e")]);
	y1m = std::stod(data[reader::getColumnIndex("y1m")]);
	y1t = std::stod(data[reader::getColumnIndex("y1t")]);
	mN1 = std::stod(data[reader::getColumnIndex("mN1")]);
	mphich = std::stod(data[reader::getColumnIndex("mphich")]);
	WH = std::stod(data[reader::getColumnIndex("WH")]);
	aEWM1 = 0.00775795;
	Gf = 0.0000116637;
	aS = 0.1172;
	QS = 100.;
	GG = 1.21358;
	Mnue = 0.;
	Mnum = 0.;
	Mnut = 0.;
	Me = 0.;
	MM = 0.1057;
	MTA = 1.777;
	MU = 0.;
	MC = 1.24;
	MT = 172.5;
	MD = 0.;
	MS = 0.1;
	MB = 4.5;
	MZ = 91.1876;
	MW = 79.15;
	mH = 125.09;
	WT = 2.;
	WZ = 2.4952;
	WW = 2.085;
	WN1 = 0.;
	Wphich = 1.;
	E = 2.71828;
	Pi = 3.14159;
	EE = 2*pow(aEWM1,0.5)*pow(Pi,0.5);
	CW2 = pow(MW,2)*pow(MZ,-2);
	SW2 = 1-CW2;
	CW = pow(CW2,0.5);
	SW = pow(SW2,0.5);
	g1 = EE*pow(CW,-1);
	g2 = EE*pow(SW,-1);
	v = 0.8408964152537146*pow(Gf,-0.5);
	CKM1x1 = 0.97428;
	CKM1x2 = 0.2253;
	CKM1x3 = 0.00347;
	CKM2x1 = 0.2252;
	CKM2x2 = 0.97345;
	CKM2x3 = 0.041;
	CKM3x1 = 0.00862;
	CKM3x2 = 0.0403;
	CKM3x3 = 0.999152;
	muH = pow(2,-0.5)*pow(pow(mH,2),0.5);
	lH = (pow(mH,2)*pow(v,-2))/2.;
	mPhisq = pow(mphich,2)-(lam3*pow(v,2))/2.;
	EL = EE;
	gc7 = -EL;
	gc8 = -y1e;
	gc9 = -y1m;
	gc10 = -y1e;
	gc11 = -y1m;
	gc12 = -y1t;
	gc13 = -y1t;
	gc14 = FAGS;
	gc15 = -FAGS;
	gc16 = - (FAGS*FAGS);
	gc17 = -(MB/v);
	gc18 = -(MD/v);
	gc19 = -(MS/v);
	gc20 = -(Me/v);
	gc21 = -(MM/v);
	gc22 = -(MTA/v);
	gc23 = -(MC/v);
	gc24 = -(MT/v);
	gc25 = -(MU/v);
	gc26 = FAGS;
	gc27 = FAGS;
	gc28 = FAGS;
	gc29 = FAGS;
	gc30 = FAGS;
	gc31 = FAGS;
	gc32 = EL;
	gc35 = - (EL*EL);
	gc36 = (CW*EL)/SW;
	gc37 =  (EL*EL)/ (SW*SW);
	gc39 = (EL*SW)/CW;
	gc40 = (CW* (EL*EL))/SW;
	gc44 = -(( (CW*CW)* (EL*EL))/ (SW*SW));
	gc45 = -0.3333333333333333*EL;
	gc46 = -0.3333333333333333*EL;
	gc47 = -0.3333333333333333*EL;
	gc48 = -EL;
	gc49 = -EL;
	gc50 = -EL;
	gc51 = (2*EL)/3.;
	gc52 = (2*EL)/3.;
	gc53 = (2*EL)/3.;
	gc54 = EL/(sqrt(2)*SW);
	gc55 = EL/(sqrt(2)*SW);
	gc56 = EL/(sqrt(2)*SW);
	gc57 = (CKM2x3*EL)/(sqrt(2)*SW);
	gc58 = (CKM2x1*EL)/(sqrt(2)*SW);
	gc59 = (CKM2x2*EL)/(sqrt(2)*SW);
	gc60 = (CKM3x3*EL)/(sqrt(2)*SW);
	gc61 = (CKM3x1*EL)/(sqrt(2)*SW);
	gc62 = (CKM3x2*EL)/(sqrt(2)*SW);
	gc63 = (CKM1x3*EL)/(sqrt(2)*SW);
	gc64 = (CKM1x1*EL)/(sqrt(2)*SW);
	gc65 = (CKM1x2*EL)/(sqrt(2)*SW);
	gc66 = EL/(sqrt(2)*SW);
	gc67 = EL/(sqrt(2)*SW);
	gc68 = EL/(sqrt(2)*SW);
	gc69 = (EL*(CKM2x3))/(sqrt(2)*SW);
	gc70 = (EL*(CKM3x3))/(sqrt(2)*SW);
	gc71 = (EL*(CKM1x3))/(sqrt(2)*SW);
	gc72 = (EL*(CKM2x1))/(sqrt(2)*SW);
	gc73 = (EL*(CKM3x1))/(sqrt(2)*SW);
	gc74 = (EL*(CKM1x1))/(sqrt(2)*SW);
	gc75 = (EL*(CKM2x2))/(sqrt(2)*SW);
	gc76 = (EL*(CKM3x2))/(sqrt(2)*SW);
	gc77 = (EL*(CKM1x2))/(sqrt(2)*SW);
	gc78L = -0.16666666666666666*(EL*(3* (CW*CW) +  (SW*SW)))/(CW*SW);
	gc78R = (EL*SW)/(3.*CW);
	gc79L = -0.16666666666666666*(EL*(3* (CW*CW) +  (SW*SW)))/(CW*SW);
	gc79R = (EL*SW)/(3.*CW);
	gc80L = -0.16666666666666666*(EL*(3* (CW*CW) +  (SW*SW)))/(CW*SW);
	gc80R = (EL*SW)/(3.*CW);
	gc81L = -0.5*(EL*( (CW*CW) -  (SW*SW)))/(CW*SW);
	gc81R = (EL*SW)/CW;
	gc82L = -0.5*(EL*( (CW*CW) -  (SW*SW)))/(CW*SW);
	gc82R = (EL*SW)/CW;
	gc83L = -0.5*(EL*( (CW*CW) -  (SW*SW)))/(CW*SW);
	gc83R = (EL*SW)/CW;
	gc84L = (CW*EL)/(2.*SW) - (EL*SW)/(6.*CW);
	gc84R = (-2*EL*SW)/(3.*CW);
	gc85L = (CW*EL)/(2.*SW) - (EL*SW)/(6.*CW);
	gc85R = (-2*EL*SW)/(3.*CW);
	gc86L = (CW*EL)/(2.*SW) - (EL*SW)/(6.*CW);
	gc86R = (-2*EL*SW)/(3.*CW);
	gc87 = (EL*( (CW*CW) +  (SW*SW)))/(2.*CW*SW);
	gc88 = (EL*( (CW*CW) +  (SW*SW)))/(2.*CW*SW);
	gc89 = (EL*( (CW*CW) +  (SW*SW)))/(2.*CW*SW);
	ch.inimass[0] = mN1;
	ch.inimass[1] = mN1;
	ch.inimass[2] = mN1;
	ch.inimass[3] = mphich;
	ch.inimass[4] = mphich;
	ch.inimass[5] = mphich;
	ch.neutraldsmasses[0] = mN1;
	ch.den_structure[0] = MT;
	ch.den_structure[1] = WT;
	ch.den_structure[2] = MZ;
	ch.den_structure[3] = WZ;
	ch.den_structure[4] = mH;
	ch.den_structure[5] = WH;
	ch.inifunc[0] = amp2s::N1N1;
	ch.inifunc[1] = amp2s::N1phich;
	ch.inifunc[2] = amp2s::phichphich;
}
