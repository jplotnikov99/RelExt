///////////////////CODE GENERATED VIA MATHEMATICA///////////////////


#include "../include/init.hpp"
#include "readdata.hpp"
#include "../amp2s/allamp2s.hpp"
#include "../amp2s/alldecays.hpp"
#include "../include/declarations.hpp"

void DT::loadpoint(std::vector<std::string> data, std::vector<double *> scanpars) {
	aEWM1 = 127.9;
	Gf = 0.0000116637;
	aS = 0.1184;
	ymdo = 0.00504;
	ymup = 0.00255;
	yms = 0.101;
	ymc = 1.27;
	ymb = 4.7;
	ymt = 172;
	yme = 0.000511;
	ymm = 0.10566;
	ymtau = 1.777;
	cabi = 0.227736;
	mMChi = 120.;
	mMPsi = 100.;
	alpha = 0.;
	lam2 = 1;
	lam3 = 1;
	lam12 = 1e-12;
	lam13 = 1;
	lam23 = 1e-12;
	lam123 = 0.;
	lam223 = 0.;
	lam332 = 0.;
	GG = 1.21978;
	Me = 0.000511;
	MMU = 0.10566;
	MTA = 1.777;
	MU = 0.00255;
	MC = 1.27;
	MT = 172;
	MD = 0.00504;
	MS = 0.101;
	MB = 4.7;
	MZ = 91.1876;
	MH = 125;
	WT = 1.50834;
	WZ = 2.4952;
	WW = 2.085;
	WH = 0.00407;
	WChi = 0.;
	WPsi = 0.;
	E = 2.71828;
	Pi = 3.14159;
	for(size_t i = 0; i < lists::ssdata.size(); i++)
	{
		*scanpars.at(i) = std::stod(lists::ssdata.at(i));
	}
	vev = 2*MW*sw*pow(EE,-1);
	lam = (pow(MH,2)*pow(vev,-2))/2.;
	muH = pow(lam*pow(vev,2),0.5);
	MChi = mMChi;
	MPsi = mMPsi;
	m22sq = (pow(MChi,2)+cos(2*alpha)*(pow(MChi,2)-pow(MPsi,2))+pow(MPsi,2)-lam12*pow(vev,2))/2.;
	m33sq = (pow(MChi,2)+pow(MPsi,2)+cos(2*alpha)*(-pow(MChi,2)+pow(MPsi,2))-lam13*pow(vev,2))/2.;
	m23sq = (-(lam123*pow(vev,2))+(2*(m22sq-m33sq)+(lam12-lam13)*pow(vev,2))*tan(2*alpha))/2.;
	aEW = pow(aEWM1,-1);
	MW = pow(pow(MZ,2)/2.+pow(-(aEW*Pi*pow(2,-0.5)*pow(Gf,-1)*pow(MZ,2))+pow(MZ,4)/4.,0.5),0.5);
	sw2 = 1-pow(MW,2)*pow(MZ,-2);
	EE = 2*pow(aEW,0.5)*pow(Pi,0.5);
	cw = pow(1-sw2,0.5);
	sw = pow(sw2,0.5);
	gw = EE*pow(sw,-1);
	g1 = EE*pow(cw,-1);
	ye = yme*pow(2,0.5)*pow(vev,-1);
	ym = ymm*pow(2,0.5)*pow(vev,-1);
	ytau = ymtau*pow(2,0.5)*pow(vev,-1);
	yup = ymup*pow(2,0.5)*pow(vev,-1);
	yc = ymc*pow(2,0.5)*pow(vev,-1);
	yt = ymt*pow(2,0.5)*pow(vev,-1);
	ydo = ymdo*pow(2,0.5)*pow(vev,-1);
	ys = yms*pow(2,0.5)*pow(vev,-1);
	yb = ymb*pow(2,0.5)*pow(vev,-1);
	CKM1x1 = cos(cabi);
	CKM1x2 = sin(cabi);
	CKM1x3 = 0;
	CKM2x1 = -sin(cabi);
	CKM2x2 = cos(cabi);
	CKM2x3 = 0;
	CKM3x1 = 0;
	CKM3x2 = 0;
	CKM3x3 = 1;
	CKMnew1x1 = 1.;
	CKMnew1x2 = 1.;
	CKMnew1x3 = 1.;
	CKMnew2x1 = 1.;
	CKMnew2x2 = 1.;
	CKMnew2x3 = 1.;
	CKMnew3x1 = 1.;
	CKMnew3x2 = 1.;
	CKMnew3x3 = 1.;
	AH = (47*pow(EE,2)*(1-(2*pow(MH,4)*pow(MT,-4))/987.-(14*pow(MH,2)*pow(MT,-2))/705.+(213*pow(MH,12)*pow(MW,-12))/2.634632e7+(5*pow(MH,10)*pow(MW,-10))/119756.+(41*pow(MH,8)*pow(MW,-8))/180950.+(87*pow(MH,6)*pow(MW,-6))/65800.+(57*pow(MH,4)*pow(MW,-4))/6580.+(33*pow(MH,2)*pow(MW,-2))/470.)*pow(Pi,-2)*pow(vev,-1))/72.;
	GH = -0.08333333333333333*(pow(G,2)*(1+(13*pow(MH,6)*pow(MT,-6))/16800.+(pow(MH,4)*pow(MT,-4))/168.+(7*pow(MH,2)*pow(MT,-2))/120.)*pow(Pi,-2)*pow(vev,-1));
	I1a11 = CKM1x1*ydo;
	I1a12 = CKM2x1*ydo;
	I1a13 = CKM3x1*ydo;
	I1a21 = CKM1x2*ys;
	I1a22 = CKM2x2*ys;
	I1a23 = CKM3x2*ys;
	I1a31 = CKM1x3*yb;
	I1a32 = CKM2x3*yb;
	I1a33 = CKM3x3*yb;
	I2a11 = CKM1x1*yup;
	I2a12 = CKM2x1*yc;
	I2a13 = CKM3x1*yt;
	I2a21 = CKM1x2*yup;
	I2a22 = CKM2x2*yc;
	I2a23 = CKM3x2*yt;
	I2a31 = CKM1x3*yup;
	I2a32 = CKM2x3*yc;
	I2a33 = CKM3x3*yt;
	I3a11 = CKM1x1*yup;
	I3a12 = CKM1x2*yup;
	I3a13 = CKM1x3*yup;
	I3a21 = CKM2x1*yc;
	I3a22 = CKM2x2*yc;
	I3a23 = CKM2x3*yc;
	I3a31 = CKM3x1*yt;
	I3a32 = CKM3x2*yt;
	I3a33 = CKM3x3*yt;
	I4a11 = CKM1x1*ydo;
	I4a12 = CKM1x2*ys;
	I4a13 = CKM1x3*yb;
	I4a21 = CKM2x1*ydo;
	I4a22 = CKM2x2*ys;
	I4a23 = CKM2x3*yb;
	I4a31 = CKM3x1*ydo;
	I4a32 = CKM3x2*ys;
	I4a33 = CKM3x3*yb;
	EL = EE;
	gc28 = -EL;
	gc29 = AH;
	gc30 = GH;
	gc31 = EL;
	gc32 = -EL;
	gc34 = EL;
	gc37 = -EL;
	gc38 = -((cw*EL)/sw);
	gc40 = (cw*EL)/sw;
	gc42 = -EL;
	gc45 = EL;
	gc46 = (cw*EL)/sw;
	gc48 = -((cw*EL)/sw);
	gc50 = (cw*EL)/sw;
	gc52 = -((cw*EL)/sw);
	gc54 = FAGS;
	gc55 = -FAGS;
	gc56 = - (FAGS*FAGS);
	gc57 = -(FAGS*GH);
	gc58 = -(GH* (FAGS*FAGS));
	gc59L = yb*(CKM2x3);
	gc59R = -(yc*(CKM2x3));
	gc60L = yb*(CKM3x3);
	gc60R = -(yt*(CKM3x3));
	gc61L = yb*(CKM1x3);
	gc61R = -(yup*(CKM1x3));
	gc62L = ydo*(CKM2x1);
	gc62R = -(yc*(CKM2x1));
	gc63L = ydo*(CKM3x1);
	gc63R = -(yt*(CKM3x1));
	gc64L = ydo*(CKM1x1);
	gc64R = -(yup*(CKM1x1));
	gc65L = ys*(CKM2x2);
	gc65R = -(yc*(CKM2x2));
	gc66L = ys*(CKM3x2);
	gc66R = -(yt*(CKM3x2));
	gc67L = ys*(CKM1x2);
	gc67R = -(yup*(CKM1x2));
	gc68L = -(yb/sqrt(2));
	gc68R = yb/sqrt(2);
	gc69L = -(ydo/sqrt(2));
	gc69R = ydo/sqrt(2);
	gc70L = -(ys/sqrt(2));
	gc70R = ys/sqrt(2);
	gc71 = -(yb/sqrt(2));
	gc72 = -(ydo/sqrt(2));
	gc73 = -(ys/sqrt(2));
	gc74 = ye;
	gc75 = ym;
	gc76 = ytau;
	gc77L = -(ye/sqrt(2));
	gc77R = ye/sqrt(2);
	gc78L = -(ym/sqrt(2));
	gc78R = ym/sqrt(2);
	gc79L = -(ytau/sqrt(2));
	gc79R = ytau/sqrt(2);
	gc80 = -(ye/sqrt(2));
	gc81 = -(ym/sqrt(2));
	gc82 = -(ytau/sqrt(2));
	gc83L = CKM2x3*yc;
	gc83R = -(CKM2x3*yb);
	gc84L = CKM2x1*yc;
	gc84R = -(CKM2x1*ydo);
	gc85L = CKM2x2*yc;
	gc85R = -(CKM2x2*ys);
	gc86L = CKM3x3*yt;
	gc86R = -(CKM3x3*yb);
	gc87L = CKM3x1*yt;
	gc87R = -(CKM3x1*ydo);
	gc88L = CKM3x2*yt;
	gc88R = -(CKM3x2*ys);
	gc89L = CKM1x3*yup;
	gc89R = -(CKM1x3*yb);
	gc90L = CKM1x1*yup;
	gc90R = -(CKM1x1*ydo);
	gc91L = CKM1x2*yup;
	gc91R = -(CKM1x2*ys);
	gc92L = yc/sqrt(2);
	gc92R = -(yc/sqrt(2));
	gc93L = yt/sqrt(2);
	gc93R = -(yt/sqrt(2));
	gc94L = yup/sqrt(2);
	gc94R = -(yup/sqrt(2));
	gc95 = -(yc/sqrt(2));
	gc96 = -(yt/sqrt(2));
	gc97 = -(yup/sqrt(2));
	gc100 = -0.5*(vev* (EL*EL))/sw;
	gc101 = EL/(2.*sw);
	gc102 = -0.5*EL/sw;
	gc103 = EL;
	gc106 = (vev* (EL*EL))/(2.*sw);
	gc107 = -0.5*EL/sw;
	gc108 = -0.5*EL/sw;
	gc112 = (vev* (EL*EL))/(2.* (sw*sw));
	gc113 = - (EL*EL);
	gc114 = (cw*EL)/sw;
	gc115 =  (EL*EL)/ (sw*sw);
	gc116R = -ye;
	gc117R = -ym;
	gc118R = -ytau;
	gc120 = -0.5*(EL*( (cw*cw) +  (sw*sw)))/(cw*sw);
	gc121 = -0.5*(cw*EL)/sw + (EL*sw)/(2.*cw);
	gc124 = (vev* (EL*EL))/(2.*cw);
	gc127 = -0.5*(vev* (EL*EL))/cw;
	gc128 = (cw* (EL*EL))/sw;
	gc132 = (vev* (EL*EL)* (( (cw*cw) +  (sw*sw))*( (cw*cw) +  (sw*sw))))/(2.* (cw*cw)* (sw*sw));
	gc133 = -(( (cw*cw)* (EL*EL))/ (sw*sw));
	gc134 = -EL;
	gc135 = -EL;
	gc136 = -EL;
	gc137 = (2*EL)/3.;
	gc138 = (2*EL)/3.;
	gc139 = (2*EL)/3.;
	gc140 = -0.3333333333333333*EL;
	gc141 = -0.3333333333333333*EL;
	gc142 = -0.3333333333333333*EL;
	gc143 = FAGS;
	gc144 = FAGS;
	gc145 = FAGS;
	gc146 = FAGS;
	gc147 = FAGS;
	gc148 = FAGS;
	gc149 = (CKM2x3*EL)/(sqrt(2)*sw);
	gc150 = (CKM2x1*EL)/(sqrt(2)*sw);
	gc151 = (CKM2x2*EL)/(sqrt(2)*sw);
	gc152 = (CKM3x3*EL)/(sqrt(2)*sw);
	gc153 = (CKM3x1*EL)/(sqrt(2)*sw);
	gc154 = (CKM3x2*EL)/(sqrt(2)*sw);
	gc155 = (CKM1x3*EL)/(sqrt(2)*sw);
	gc156 = (CKM1x1*EL)/(sqrt(2)*sw);
	gc157 = (CKM1x2*EL)/(sqrt(2)*sw);
	gc158 = (EL*(CKM2x3))/(sqrt(2)*sw);
	gc159 = (EL*(CKM3x3))/(sqrt(2)*sw);
	gc160 = (EL*(CKM1x3))/(sqrt(2)*sw);
	gc161 = (EL*(CKM2x1))/(sqrt(2)*sw);
	gc162 = (EL*(CKM3x1))/(sqrt(2)*sw);
	gc163 = (EL*(CKM1x1))/(sqrt(2)*sw);
	gc164 = (EL*(CKM2x2))/(sqrt(2)*sw);
	gc165 = (EL*(CKM3x2))/(sqrt(2)*sw);
	gc166 = (EL*(CKM1x2))/(sqrt(2)*sw);
	gc167 = EL/(sqrt(2)*sw);
	gc168 = EL/(sqrt(2)*sw);
	gc169 = EL/(sqrt(2)*sw);
	gc170 = EL/(sqrt(2)*sw);
	gc171 = EL/(sqrt(2)*sw);
	gc172 = EL/(sqrt(2)*sw);
	gc173L = (cw*EL)/(2.*sw) - (EL*sw)/(6.*cw);
	gc173R = (-2*EL*sw)/(3.*cw);
	gc174L = (cw*EL)/(2.*sw) - (EL*sw)/(6.*cw);
	gc174R = (-2*EL*sw)/(3.*cw);
	gc175L = (cw*EL)/(2.*sw) - (EL*sw)/(6.*cw);
	gc175R = (-2*EL*sw)/(3.*cw);
	gc176L = -0.16666666666666666*(EL*(3* (cw*cw) +  (sw*sw)))/(cw*sw);
	gc176R = (EL*sw)/(3.*cw);
	gc177L = -0.16666666666666666*(EL*(3* (cw*cw) +  (sw*sw)))/(cw*sw);
	gc177R = (EL*sw)/(3.*cw);
	gc178L = -0.16666666666666666*(EL*(3* (cw*cw) +  (sw*sw)))/(cw*sw);
	gc178R = (EL*sw)/(3.*cw);
	gc179 = (EL*( (cw*cw) +  (sw*sw)))/(2.*cw*sw);
	gc180 = (EL*( (cw*cw) +  (sw*sw)))/(2.*cw*sw);
	gc181 = (EL*( (cw*cw) +  (sw*sw)))/(2.*cw*sw);
	gc182L = -0.5*(EL*( (cw*cw) -  (sw*sw)))/(cw*sw);
	gc182R = (EL*sw)/cw;
	gc183L = -0.5*(EL*( (cw*cw) -  (sw*sw)))/(cw*sw);
	gc183R = (EL*sw)/cw;
	gc184L = -0.5*(EL*( (cw*cw) -  (sw*sw)))/(cw*sw);
	gc184R = (EL*sw)/cw;
}
